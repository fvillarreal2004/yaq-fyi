name = "gdrive"
description = "Upload files to a specified google drive folder"
traits = ["is-daemon"]

[links]
source = "https://gitlab.com/yaq/yaqd-gdrive"
bugtracker = "https://gitlab.com/yaq/yaqd-gdrive/issues"

[installation]
PyPI = "https://pypi.org/project/yaqd-gdrive"

[config]
client_secret.type = "string"
client_id.type = "string"
root_folder_id.type = "string"
scopes.type = "[string]"
scopes.default = ["https://www.googleapis.com/auth/drive.file"]
authorization_url.type = "string"
authorization_url.default = "https://accounts.google.com/o/oauth2/v2/auth"
token_url.type = "string"
token_url.default = "https://www.googleapis.com/oauth2/v4/token"
create_file_url.type = "string"
create_file_url.default = "https://www.googleapis.com/upload/drive/v3/files"
generate_ids_url.type = "string"
generate_ids_url.default = "https://www.googleapis.com/drive/v3/files/generateIds"
update_file_url.type = "string"
update_file_url.default = "https://www.googleapis.com/upload/drive/v3/files/{file_id}"
download_url.type = "string"
download_url.default = "https://drive.google.com/uc?id={file_id}"
open_url.type = "string"
open_url.default =  "https://drive.google.com/open?id={file_id}"


[state]
access_token.type = "string"
refresh_token.type = "string"
upload_queue.type = "[[string*5], ...]"
copy_queue.type = "[[string*5], ...]"
id_mapping.type = "{string: string, ...}"


[method]

    [method.reserve_id]
        args.client_id.type = "string"
        args.drive_id.type = "string"
        args.drive_id.default = "NULL"
        args.drive_id.description = "If not given use an existing id if possible or retrieve a new one."
        returns = "string"
        description = "Insert an id mapping into the state"
    [method.id_to_open_url]
        args.id_.type = "string"
        returns = "string"
        description = "Format an id in a url suitable to open the file."
    [method.id_to_download_url]
        args.id_.type = "string"
        returns = "string"
        description = "Format an id in a url suitable to download the file."
    [method.create_folder]
        args.path.type = "string"
        args.parent_id.type = "string"
        args.parent_id.default = "NULL"
        args.id_.type = "string"
        args.id_.default = "NULL"
        description = "Create a new folder in the remote drive"
    [method.upload_folder]
        args.path.type = "string"
        args.parent_id.type = "string"
        args.parent_id.default = "NULL"
        args.id_.type = "string"
        args.id_.default = "NULL"
        description = "Upload a folder and its contents, recursively, to the remote drive"
    [method.create_file]
        args.path.type = "string"
        args.parent_id.type = "string"
        args.parent_id.default = "NULL"
        args.id_.type = "string"
        args.id_.default = "NULL"
        description = "Create a new file on the remote drive"
    [method.update_file]
        args.path.type = "string"
        args.id_.type = "string"
        args.id_.default = "NULL"
        description = "Update the contents of an existing file"
    [method.is_uploaded]
        args.id_.type = "string"
        returns = "boolean"
        description = "Check if a particular file has been procesed and uploaded"
